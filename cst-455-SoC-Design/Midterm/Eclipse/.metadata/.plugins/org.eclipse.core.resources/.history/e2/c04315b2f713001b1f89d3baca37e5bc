#include "sys/alt_stdio.h"
#include "system.h"
#include <io.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "FreeRTOS.h"
#include "task.h"


void task1(void *p);
void task2(void *p);

int Decode(int conv);
void cylon();
void starlight();
int Single(int one);

//Threads (use RTOS) and PWM (going to need to use hardware sources)

int main()
{
	// Thread tasks
	xTaskCreate(task1, "task1", 512, NULL, 2, NULL);
	xTaskCreate(task2, "task2", 512, NULL, 2, NULL);

	vTaskStartScheduler();

	while(1);

  return 0;
}

void task1(void *p)
{
	int SW = 0;
	int Result1 = 0;
	int FUNC = 0;
	int Num0 = 0;
	int Num1 = 0;
	int HEX0 = 0;
	int HEX1 = 0;
	int HEX2 = 0;
	int HEX3 = 0;
	int HEX4 = 0;
	int HEX5 = 0;

	while(1)
	{
		SW = IORD(SWITCHES_BASE, 0);

		FUNC = (SW & 0x300) >> 8;

		Num0 = (SW & 0x00F);

		Num1 = (SW & 0x0F0) >> 4;



		switch(FUNC)
		{
			case 0:
				Result1 = 0;
				Num0 = 0;
				Num1 = 0;
				break;
			case 1:
				Result1 = Num0 + Num1;
				break;
			case 2:
				Result1 = Num0 - Num1;
				break;
			case 3:
				Result1 = Num0 * Num1;
				break;
			default:
				Result1 = 0;
				Num0 = 0;
				Num1 = 0;
		}

		if(Num0 > 9)
		{
			HEX5 = Num0 / 10;
		}
		else
		{
			HEX5 = 0;
		}
		HEX4 = Num0 % 10;

		if(Num1 > 9)
		{
			HEX3 = Num1 / 10;
		}
		else
		{
			HEX3 = 0;
		}
		HEX2 = Num1 % 10;

		if(Result1 > 9)
		{
			HEX1 = Result1 / 10;
		}
		else
		{
			HEX1 = 0;
		}
		HEX0 = Result1 % 10;

		HEX0 = Decode(HEX0);
	  	HEX1 = Decode(HEX1);
	  	HEX2 = Decode(HEX2);
		HEX3 = Decode(HEX3);
	  	HEX4 = Decode(HEX4);
	  	HEX5 = Decode(HEX5);

		IOWR(HEX_0_BASE, 0, HEX0);
		IOWR(HEX_1_BASE, 0, HEX1);
		IOWR(HEX_2_BASE, 0, HEX2);
		IOWR(HEX_3_BASE, 0, HEX3);
		IOWR(HEX_4_BASE, 0, HEX4);
		IOWR(HEX_5_BASE, 0, HEX5);
	}

}
void task2(void *p)
{
	int BUT = 0;
	int counter = 0;

	printf("Entered Task 2");

	while(1)
	{

		BUT = IORD(KEYS_BASE, 0);

		//printf("BUT = %d", BUT);

		//vTaskDelay(5000);

		switch(BUT)
		{
			case 14:
				IOWR(LEDS_BASE, 0, 0x0);
				counter = 0;
				break;
			case 13:
				cylon();
				counter = 0;
				break;
			case 11:
				counter += 1;
				IOWR(LEDS_BASE, 0, counter);
				vTaskDelay(200);
				break;
			case 7:
				NewPattern();
				counter = 0;
				break;
		}
	}
}

int Decode(int conv)
{
	switch(conv)
	{
		case 0:
			conv = 0b1000000;
			break;
		case 1:
			conv = 0b1111001;
			break;
		case 2:
			conv = 0b0100100;
			break;
		case 3:
			conv = 0b0110000;
			break;
		case 4:
			conv = 0b0011001;
			break;
		case 5:
			conv = 0b0010010;
			break;
		case 6:
			conv = 0b0000010;
			break;
		case 7:
			conv = 0b1111000;
			break;
		case 8:
			conv = 0b0000000;
			break;
		case 9:
			conv = 0b0011000;
			break;
		default:
			conv = 0b1000000;
	}
	return conv;
}

void cylon()
{
	int cur = 0;
	int max = 0b10000000000;
	int min = 0;

	while(((IORD(KEYS_BASE, 0) == 13) | (IORD(KEYS_BASE, 0) == 15)) & (IORD(KEYS_BASE, 0) != 14))
	{
		cur = 1;
		while(cur != max)
		{
			IOWR(LEDS_BASE, 0, cur);
			cur = cur << 1;
			vTaskDelay(50);

		}
		while(cur != min)
		{
			cur = cur >> 1;
			IOWR(LEDS_BASE, 0, cur);
			vTaskDelay(50);
		}
	}
}

void NewPattern()
{
	int cur = 0;
	int sec1 = 0;
	int sec2 = 0;
	while((IORD(KEYS_BASE, 0) == 7) | (IORD(KEYS_BASE, 0) == 0))
	{
		/*
			LED:			1000000001
							1100000011
							1110000111
							1111001111
							1111111111
							1111001111
							1110000111
							1100000011
							1000000001
							1100000011...
		*/
		sec1 = 0b1000000000;
		sec2 = 0b0000000001;
		cur = sec1 + sec2;

		while(sec2 < 16)
		{
			IOWR(LEDS_BASE, 0, cur);
			sec1 = (sec1 >> 1) + 1024;
			sec2 = (sec2 << 1) + 1;
			cur = sec1 + sec2;
			vTaskDelay(50);
		}

		while(sec2 >= 0)
		{
			IOWR(LEDS_BASE, 0, cur);
			sec1 = (sec1 << 1) - 1024;
			sec2 = (sec2 >> 1) - 1;
			cur = sec1 + sec2;
			vTaskDelay(50);
		}

	}
}

int Single(int one)
{
	switch(one)
	{
		case 0:
			one = 0b1;
			break;
		case 1:
			one = 0b10;
			break;
		case 2:
			one = 0b100;
			break;
		case 3:
			one = 0b1000;
			break;
		case 4:
			one = 0b10000;
			break;
		case 5:
			one = 0b100000;
			break;
		case 6:
			one = 0b1000000;
			break;
		case 7:
			one = 0b10000000;
			break;
		case 8:
			one = 0b100000000;
			break;
		case 9:
			one = 0b1000000000;
			break;
		default:
			one = 0b1111111111;
			break;
	}
	return one;
}
